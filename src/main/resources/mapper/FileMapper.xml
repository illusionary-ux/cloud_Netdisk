<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.cuit.cloud_netdisk.dao.FileMapper">

    <!-- 结果映射 -->
    <resultMap id="fileResultMap" type="edu.cuit.cloud_netdisk.pojo.entity.File">
        <id property="fileId" column="file_id"/>
        <result property="fileName" column="file_name"/>
        <result property="fileType" column="file_type"/>
        <result property="fileSize" column="file_size"/>
        <result property="storagePath" column="storage_path"/>
        <result property="uploadUser" column="upload_user"/>
        <result property="folder" column="folder_id"/>
        <result property="isFavorite" column="is_favorite"/>
        <result property="isDeleted" column="is_deleted"/>
        <result property="uploadTime" column="upload_time"/>
    </resultMap>

    <!-- 插入文件 -->
    <insert id="save" parameterType="edu.cuit.cloud_netdisk.pojo.entity.File">
        INSERT INTO files (
            file_id,
            file_name,
            file_type,
            file_size,
            storage_path,
            upload_user,
            folder_id,
            is_favorite,
            is_deleted,
            upload_time
        ) VALUES (
                     #{fileId},
                     #{fileName},
                     #{fileType},
                     #{fileSize},
                     #{storagePath},
                     #{uploadUser},
                     #{folder},
                     #{isFavorite},
                     #{isDeleted},
                     #{uploadTime}
                 )
    </insert>

    <!-- 更新文件 -->
    <update id="update" parameterType="edu.cuit.cloud_netdisk.pojo.entity.File">
        UPDATE files SET
                         file_name = #{fileName},
                         file_type = #{fileType},
                         file_size = #{fileSize},
                         storage_path = #{storagePath},
                         upload_user = #{uploadUser},
                         folder_id = #{folder},
                         is_favorite = #{isFavorite},
                         is_deleted = #{isDeleted},
                         upload_time = #{uploadTime}
        WHERE file_id = #{fileId}
    </update>

    <!-- 根据ID逻辑删除文件 -->
    <update id="deleteById">
        UPDATE files
        SET is_deleted = 1,
            upload_time = NOW(),
            upload_user = #{userId}
        WHERE file_id = #{fileId}
    </update>

    <!-- 恢复已删除的文件 -->
    <update id="recoverById">
        UPDATE files
        SET is_deleted = 0,
            upload_time = NOW(),
            upload_user = #{userId}
        WHERE file_id = #{fileId}
    </update>

    <!-- 根据ID查询文件 -->
    <select id="findById" resultMap="fileResultMap">
        SELECT * FROM files
        WHERE file_id = #{fileId}
    </select>

    <!-- 检查文件是否存在 -->
    <select id="existsById" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM files
        WHERE file_id = #{fileId}
    </select>

    <!-- 根据文件夹ID查询文件列表（未被删除） -->
    <select id="findByFolderId" resultMap="fileResultMap">
        SELECT
            file_id,
            file_name,
            file_type,
            file_size,
            storage_path,
            upload_user,
            folder_id,
            is_favorite,
            is_deleted,
            upload_time
        FROM files
        WHERE folder_id = #{folderId}
          AND is_deleted = 0
    </select>

    <!-- 根据文件夹ID查询文件列表（包含被删除的文件） -->
    <select id="findByFolderIdIncludeDeleted" resultMap="fileResultMap">
        SELECT * FROM files WHERE folder_id = #{folderId}
    </select>

    <select id="quickSearchByFileId" parameterType="String" resultType="String">
        SELECT
            storage_path
        FROM files
        WHERE file_id = #{fileId}
    </select>

    <!-- 适用于 MySQL 的版本 -->
    <update id="safeIncrementUsedStorage" parameterType="map">
        UPDATE user
        SET
            used_storage = used_storage + #{deltaStorage},
            last_update = NOW()
        WHERE
            user_id = #{userId}
          AND (used_storage + #{deltaStorage}) BETWEEN 0 AND storage_limit
    </update>

    <!-- 获取更新后的used_storage值 -->
    <select id="getUpdatedUsedStorage" resultType="java.lang.Long">
        SELECT used_storage
        FROM user
        WHERE user_id = #{userId}
    </select>

    <select id="getFileSize" resultType="java.lang.Long">
        SELECT file_size
        FROM files
        WHERE file_id = #{fileId}
    </select>

    <select id="getFileSizeWithDeleted" resultType="java.lang.Long">
        SELECT file_size
        FROM files
        WHERE file_id = #{fileId}
        <if test="includeDeleted == null or includeDeleted == false">
            AND is_deleted = 0
        </if>
    </select>

    <!-- 统计OSS路径在file表中的出现次数 -->
    <select id="countByStoragePath" resultType="int">
        SELECT COUNT(*)
        FROM files
        WHERE storage_path = #{storagePath}
    </select>

    <!-- 查询某文件夹及其所有子文件夹下所有文件的路径（包含已删除文件） -->
    <select id="getAllFilePathsByFolderIdRecursive" parameterType="String" resultType="String">
        WITH RECURSIVE subfolders AS (
            SELECT folder_id FROM folder WHERE folder_id = #{folderId}
            UNION ALL
            SELECT f.folder_id FROM folder f
            INNER JOIN subfolders sf ON f.parent_folder_id = sf.folder_id
        )
        SELECT storage_path FROM files WHERE folder_id IN (SELECT folder_id FROM subfolders)
    </select>

    <select id="getFilePathByIdIncludeDeleted" parameterType="String" resultType="String">
        SELECT storage_path FROM files WHERE file_id = #{fileId}
    </select>

    <select id="getAllFilePathsByFolderIdIncludeDeleted" parameterType="String" resultType="String">
        SELECT storage_path FROM files WHERE folder_id = #{folderId}
    </select>

    <delete id="deleteFolderAndFilesRecursive" parameterType="String">
        -- 先删文件
        DELETE FROM files WHERE folder_id IN (
            WITH RECURSIVE subfolders AS (
                SELECT folder_id FROM folder WHERE folder_id = #{folderId}
                UNION ALL
                SELECT f.folder_id FROM folder f
                INNER JOIN subfolders sf ON f.parent_folder_id = sf.folder_id
            )
            SELECT folder_id FROM subfolders
        );
        -- 再删文件夹
        DELETE FROM folder WHERE folder_id IN (
            WITH RECURSIVE subfolders AS (
                SELECT folder_id FROM folder WHERE folder_id = #{folderId}
                UNION ALL
                SELECT f.folder_id FROM folder f
                INNER JOIN subfolders sf ON f.parent_folder_id = sf.folder_id
            )
            SELECT folder_id FROM subfolders
        );
    </delete>

    <!-- 递归软删除文件夹下所有文件 -->
    <update id="softDeleteFilesByFolderRecursive">
        UPDATE files
        SET is_deleted = 1,
            upload_time = NOW()
        WHERE folder_id IN (
            WITH RECURSIVE subfolders AS (
                SELECT folder_id FROM folder WHERE folder_id = #{folderId}
                UNION ALL
                SELECT f.folder_id FROM folder f
                INNER JOIN subfolders sf ON f.parent_folder_id = sf.folder_id
            )
            SELECT folder_id FROM subfolders
        );
    </update>

    <!-- 递归查询指定文件夹及其所有子文件夹下所有文件id -->
    <select id="selectAllFileIdsByFolderRecursive" resultType="java.lang.String">
        WITH RECURSIVE subfolders AS (
            SELECT folder_id FROM folder WHERE folder_id = #{folderId}
            UNION ALL
            SELECT f.folder_id FROM folder f
            INNER JOIN subfolders sf ON f.parent_folder_id = sf.folder_id
        )
        SELECT file_id FROM files WHERE folder_id IN (SELECT folder_id FROM subfolders);
    </select>

</mapper>